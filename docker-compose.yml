services:

  frontend:
    build:
      context: ./frontend
      args:
        - VITE_API_BASE_URL=/api
    ports:
      - "80:80"
    depends_on:
      - api-gateway

  infrastructure-service:
    build:
      context: ./backend/infrastructure_service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://infrastructure-db:5432/infra_service
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka/
    depends_on:
      - infrastructure-db
      - broker
      - eureka-service

  notification-service:
    build:
      context: ./backend/notification_service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notification-db:5432/notification_db
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka/
    depends_on:
      - notification-db
      - broker
      - eureka-service

  report-service:
    build:
      context: ./backend/report_service
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      - eureka-service
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka/

  api-gateway:
    build:
      context: ./backend/api_gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - eureka-service
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka/

  auth-service:
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - eureka-service
      - auth-db
      - redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-db:5432/auth_db
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka/
      REDIS_HOST: redis
      REDIS_PORT: 6379
  user-service:
    build:
      context: ./backend/user_service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - eureka-service
      - user-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/user_db
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka/

  camera-service:
    build:
      context: ./backend/camera_service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - eureka-service
      - camera-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://camera-db:5432/camera_service
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8761/eureka/

  eureka-service:
    build:
      context: ./backend/eureka_server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"

  auth-db:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: auth_db
    volumes:
      - auth_data:/var/lib/postgresql/data

  user-db:
    image: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: user_db
    volumes:
      - user_data:/var/lib/postgresql/data

  camera-db:
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
      POSTGRES_DB: camera_service
    ports:
      - "5555:5432"
    volumes:
      - camera_data:/var/lib/postgresql/data

  infrastructure-db:
    image: kartoza/postgis
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: infra_service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - infra_data_postgis:/var/lib/postgresql/data

  notification-db:
    image: postgres
    ports:
      - "5438:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: notification_db
    volumes:
      - notification_data:/var/lib/postgresql/data

  redis:
    image: redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  broker:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    restart:
      always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092, HOST_PLAIN://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, HOST_PLAIN:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'

volumes:
  infra_data_postgis:
  notification_data:
  auth_data:
  redis_data:
  user_data:
  camera_data:
  kafka_data:
  zookeeper_data:
  zookeeper_log:
